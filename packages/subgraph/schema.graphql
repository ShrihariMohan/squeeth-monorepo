type Vault @entity {
  id: ID!
  shortAmount: BigInt!
  collateralAmount: BigInt!
  NftCollateralId: BigInt
  operator: Bytes
  owner: Account!
}

type Account @entity {
  # user address
  id: ID!
  vaults: [Vault!]! @derivedFrom(field: "owner")
  vaultCount: BigInt!
  # position balance user has
  positions: [Position!]! @derivedFrom(field: "owner")
}

type Liquidation @entity {
  id: ID!
  vaultId: BigInt!
  debtAmount: BigInt!
  collateralPaid: BigInt!
  liquidator: Bytes!
  timestamp: BigInt!
}

type NormalizationFactorUpdate @entity {
  id: ID!
  oldNormFactor: BigInt!
  newNormFactor: BigInt!
  lastModificationTimestamp: BigInt!
  timestamp: BigInt!
}

type HourStatSnapshot @entity {
  id: ID!
  timestamp: BigInt!
  totalCollateralAmount: BigInt!
}

type DayStatSnapshot @entity {
  id: ID!
  timestamp: BigInt!
  totalCollateralAmount: BigInt!
}

enum Action {
  WITHDRAW_COLLAT
  DEPOSIT_COLLAT
  OPEN_SHORT
  CLOSE_SHORT
  MINT
  BURN
  LIQUIDATE
}

type VaultHistory @entity {
  id: ID!
  from: Bytes!
  sender: Bytes!
  txid: String!
  timestamp: BigInt!
  totalEthCollateralAmount: BigInt!
  oSqthAmount: BigInt!
  ethCollateralAmount: BigInt!
  action: Action!
  vaultId: BigInt!
}

type CrabStrategyTx @entity {
  id: ID!
  type: String!
  lpAmount: BigInt
  ethAmount: BigInt!
  wSqueethAmount: BigInt
  owner: Bytes
  isSellingSqueeth: Boolean
  timestamp: BigInt!
  auctionPrice: BigInt
  wSqueethHedgeTargetAmount: BigInt
  ethHedgeTargetAmount: BigInt
  hedgerPrice: BigInt
}

type CrabAuction @entity {
  id: ID!
  isSellingSqueeth: Boolean!
  squeethAmount: BigInt!
  ethAmount: BigInt!
  isHedgingOnUniswap: Boolean!
  owner: Bytes!
  timestamp: BigInt!
}

enum TransactionType {
  MINT_OSQTH
  BURN_OSQTH
  DEPOSIT_COLLAT
  WITHDRAW_COLLAT
  SEND_OSQTH
  RECEIVE_OSQTH
  BUY_OSQTH
  SELL_OSQTH
  ADD_LIQUIDITY
  REMOVE_LIQUIDITY
  COLLECT_FEE
}

type TransactionHistory @entity {
  id: ID!
  timestamp: BigInt!
  transactionType: TransactionType!
  owner: Account!
  sender: Bytes!
  oSqthAmount: BigInt!
  ethAmount: BigInt!
  oSqthPriceInETH: BigDecimal!
  ethPriceInUSD: BigDecimal!
  ethUSDCSqrtPrice: BigInt!
  ethOSQTHSqrtPrice: BigInt!
}

type Pool @entity {
  # pool address
  id: ID!
  # creation
  createdAtTimestamp: BigInt!
  # current price tracker
  sqrtPrice: BigInt!
  # token0 per token1
  token0Price: BigDecimal
  # token1 per token0
  token1Price: BigDecimal
}

enum PositionType {
  LONG
  SHORT
  LP
}

type Position @entity {
  # user address - position type
  id: ID!
  # user address
  owner: Account!
  positionType: PositionType!

  # current osqth amount the user put in this position
  osqthBalance: BigDecimal!
  # current eth amount the user put in this position
  ethBalance: BigDecimal!
  # osqth spent in USD value (Execution price), can get avg spent per osqth with osqthBalance
  unrealizedOSQTHCost: BigDecimal!
  # eth spent in USD value (Execution price), can get avg spent per eth with ethBalance
  unrealizedETHCost: BigDecimal!

  # Avg value got per osqth
  realizedOSQTHUnitGain: BigDecimal!
  # no of oSQTH realised
  realizedOSQTHAmount: BigDecimal!
  # Avg value got per eth
  realizedETHUnitGain: BigDecimal!
  # no of eth realised
  realizedETHAmount: BigDecimal!
}
